{"ast":null,"code":"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { ThunkMiddleware } from \"redux-thunk\";\nimport reducer from \"../reducers\";\n\nconst configureStore = context => {\n  console.log(context);\n  const middlewares = [];\n  const enhancer = false //개발용인지 아닌지\n  ? compose(applyMiddleware(...middlewares)) //배포용일때\n  : composeWithDevTools( //개발용일때,, devtool을 넣음. 이런건 nextjs 쓸때만 하는건가??\n  applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); //스토어ㄹ 가와\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/hangyujin/Desktop/JBBP/tutorial/getnodebird/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","ThunkMiddleware","reducer","configureStore","context","console","log","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GACZ,MAAsC;AAAtC,IACIV,OAAO,CAACF,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CADX,CAC6C;AAD7C,IAEIP,mBAAmB,EACjB;AACAJ,EAAAA,eAAe,CAAC,GAAGW,WAAJ,CAFE,CAHzB;AAOA,QAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB,CAVkC,CAUY;;AAC9C,SAAOC,KAAP;AACD,CAZD;;AAcA,MAAMC,OAAO,GAAGX,aAAa,CAACI,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { ThunkMiddleware } from \"redux-thunk\";\n\nimport reducer from \"../reducers\";\n\nconst configureStore = (context) => {\n  console.log(context);\n  const middlewares = [];\n  const enhancer =\n    process.env.NODE_ENV === \"production\" //개발용인지 아닌지\n      ? compose(applyMiddleware(...middlewares)) //배포용일때\n      : composeWithDevTools(\n          //개발용일때,, devtool을 넣음. 이런건 nextjs 쓸때만 하는건가??\n          applyMiddleware(...middlewares)\n        );\n  const store = createStore(reducer, enhancer); //스토어ㄹ 가와\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}