{"ast":null,"code":"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { ThunkMiddleware } from \"redux-thunk\";\nimport reducer from \"../reducers\";\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore(context) {\n  console.log(context);\n  var middlewares = [];\n  var enhancer = false //개발용인지 아닌지\n  ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용일때\n  : composeWithDevTools( //개발용일때,, devtool을 넣음. 이런건 nextjs 쓸때만 하는건가??\n  applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer); //스토어ㄹ 가와\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/hangyujin/Desktop/JBBP/tutorial/getnodebird/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","ThunkMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","context","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,gBAAgB,GACpB,SADIA,gBACJ;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SACA,UAACC,IAAD;AAAA,WACA,UAACC,MAAD,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAJD;AAAA,GADA;AAAA,CADF;;AAQA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAClCH,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GACZ,MAAsC;AAAtC,IACIf,OAAO,CAACF,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADX,CAC6C;AAD7C,IAEIZ,mBAAmB,EACjB;AACAJ,EAAAA,eAAe,MAAf,SAAmBgB,WAAnB,CAFiB,CAHzB;AAOA,MAAME,KAAK,GAAGjB,WAAW,CAACK,OAAD,EAAUW,QAAV,CAAzB,CAVkC,CAUY;;AAC9C,SAAOC,KAAP;AACD,CAZD;;AAcA,IAAMC,OAAO,GAAGhB,aAAa,CAACW,cAAD,EAAiB;AAAEM,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { ThunkMiddleware } from \"redux-thunk\";\n\nimport reducer from \"../reducers\";\n\nconst loggerMiddleware =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    console.log(action);\n    return next(action);\n  };\n\nconst configureStore = (context) => {\n  console.log(context);\n  const middlewares = [];\n  const enhancer =\n    process.env.NODE_ENV === \"production\" //개발용인지 아닌지\n      ? compose(applyMiddleware(...middlewares)) //배포용일때\n      : composeWithDevTools(\n          //개발용일때,, devtool을 넣음. 이런건 nextjs 쓸때만 하는건가??\n          applyMiddleware(...middlewares)\n        );\n  const store = createStore(reducer, enhancer); //스토어ㄹ 가와\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\" });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}